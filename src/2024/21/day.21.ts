import fs from "fs";

import "@/utils/array";
import { toKey } from "@/utils/common";

type NumericButtons =
  | "A"
  | "0"
  | "1"
  | "2"
  | "3"
  | "4"
  | "5"
  | "6"
  | "7"
  | "8"
  | "9";

const NUMERIC_TRANSITIONS: Record<
  NumericButtons,
  Record<NumericButtons, DirectionalButtons[][]>
> = {
  ["A"]: {
    ["A"]: [[]],
    ["0"]: [["<"]],
    ["1"]: [
      ["<", "^", "<"],
      ["^", "<", "<"],
    ],
    ["2"]: [
      ["<", "^"],
      ["^", "<"],
    ],
    ["3"]: [["^"]],
    ["4"]: [
      ["<", "^", "<", "^"],
      ["<", "^", "^", "<"],
      ["^", "<", "<", "^"],
      ["^", "<", "^", "<"],
      ["^", "^", "<", "<"],
    ],
    ["5"]: [
      ["<", "^", "^"],
      ["^", "<", "^"],
      ["^", "^", "<"],
    ],
    ["6"]: [["^", "^"]],
    ["7"]: [
      ["<", "^", "<", "^", "^"],
      ["<", "^", "^", "<", "^"],
      ["<", "^", "^", "^", "<"],
      ["^", "<", "<", "^", "^"],
      ["^", "<", "^", "<", "^"],
      ["^", "<", "^", "^", "<"],
      ["^", "^", "<", "<", "^"],
      ["^", "^", "<", "^", "<"],
      ["^", "^", "^", "<", "<"],
    ],
    ["8"]: [
      ["<", "^", "^", "^"],
      ["^", "<", "^", "^"],
      ["^", "^", "<", "^"],
      ["^", "^", "^", "<"],
    ],
    ["9"]: [["^", "^", "^"]],
  },
  ["0"]: {
    ["A"]: [[">"]],
    ["0"]: [[]],
    ["1"]: [["^", "<"]],
    ["2"]: [["^"]],
    ["3"]: [
      ["^", ">"],
      [">", "^"],
    ],
    ["4"]: [
      ["^", "<", "^"],
      ["^", "^", "<"],
    ],
    ["5"]: [["^", "^"]],
    ["6"]: [
      ["^", "^", ">"],
      ["^", ">", "^"],
      [">", "^", "^"],
    ],
    ["7"]: [
      ["^", "<", "^", "^"],
      ["^", "^", "<", "^"],
      ["^", "^", "^", "<"],
    ],
    ["8"]: [["^", "^", "^"]],
    ["9"]: [
      [">", "^", "^", "^"],
      ["^", ">", "^", "^"],
      ["^", "^", ">", "^"],
      ["^", "^", "^", ">"],
    ],
  },
  ["1"]: {
    ["A"]: [
      [">", ">", "v"],
      [">", "v", ">"],
    ],
    ["0"]: [[">", "v"]],
    ["1"]: [[]],
    ["2"]: [[">"]],
    ["3"]: [[">", ">"]],
    ["4"]: [["^"]],
    ["5"]: [
      ["^", ">"],
      [">", "^"],
    ],
    ["6"]: [
      ["^", ">", ">"],
      [">", "^", ">"],
      [">", ">", "^"],
    ],
    ["7"]: [["^", "^"]],
    ["8"]: [
      ["^", "^", ">"],
      ["^", ">", "^"],
      [">", "^", "^"],
    ],
    ["9"]: [
      [">", ">", "^", "^"],
      [">", "^", ">", "^"],
      [">", "^", "^", ">"],
      ["^", ">", ">", "^"],
      ["^", ">", "^", ">"],
      ["^", "^", ">", ">"],
    ],
  },
  ["2"]: {
    ["A"]: [
      [">", "v"],
      ["v", ">"],
    ],
    ["0"]: [["v"]],
    ["1"]: [["<"]],
    ["2"]: [[]],
    ["3"]: [[">"]],
    ["4"]: [
      ["<", "^"],
      ["^", "<"],
    ],
    ["5"]: [["^"]],
    ["6"]: [
      ["^", ">"],
      [">", "^"],
    ],
    ["7"]: [
      ["<", "^", "^"],
      ["^", "<", "^"],
      ["^", "^", "<"],
    ],
    ["8"]: [["^", "^"]],
    ["9"]: [
      [">", "^", "^"],
      ["^", ">", "^"],
      ["^", "^", ">"],
    ],
  },
  ["3"]: {
    ["A"]: [["v"]],
    ["0"]: [
      ["v", "<"],
      ["<", "v"],
    ],
    ["1"]: [["<", "<"]],
    ["2"]: [["<"]],
    ["3"]: [[]],
    ["4"]: [
      ["<", "<", "^"],
      ["<", "^", "<"],
      ["^", "<", "<"],
    ],
    ["5"]: [
      ["<", "^"],
      ["^", "<"],
    ],
    ["6"]: [["^"]],
    ["7"]: [
      ["<", "<", "^", "^"],
      ["<", "^", "<", "^"],
      ["<", "^", "^", "<"],
      ["^", "<", "<", "^"],
      ["^", "<", "^", "<"],
      ["^", "^", "<", "<"],
    ],
    ["8"]: [
      ["<", "^", "^"],
      ["^", "<", "^"],
      ["^", "^", "<"],
    ],
    ["9"]: [["^", "^"]],
  },
  ["4"]: {
    ["A"]: [
      [">", ">", "v", "v"],
      [">", "v", ">", "v"],
      [">", "v", "v", ">"],
      ["v", ">", ">", "v"],
      ["v", ">", "v", ">"],
    ],
    ["0"]: [
      [">", "v", "v"],
      ["v", ">", "v"],
    ],
    ["1"]: [["v"]],
    ["2"]: [
      [">", "v"],
      ["v", ">"],
    ],
    ["3"]: [
      [">", ">", "v"],
      [">", "v", ">"],
      ["v", ">", ">"],
    ],
    ["4"]: [[]],
    ["5"]: [[">"]],
    ["6"]: [[">", ">"]],
    ["7"]: [["^"]],
    ["8"]: [
      ["^", ">"],
      [">", "^"],
    ],
    ["9"]: [
      ["^", ">", ">"],
      [">", "^", ">"],
      [">", ">", "^"],
    ],
  },
  ["5"]: {
    ["A"]: [
      [">", "v", "v"],
      ["v", ">", "v"],
      ["v", "v", ">"],
    ],
    ["0"]: [["v", "v"]],
    ["1"]: [
      ["v", "<"],
      ["<", "v"],
    ],
    ["2"]: [["v"]],
    ["3"]: [
      [">", "v"],
      ["v", ">"],
    ],
    ["4"]: [["<"]],
    ["5"]: [[]],
    ["6"]: [[">"]],
    ["7"]: [
      ["<", "^"],
      ["^", "<"],
    ],
    ["8"]: [["^"]],
    ["9"]: [
      [">", "^"],
      ["^", ">"],
    ],
  },
  ["6"]: {
    ["A"]: [["v", "v"]],
    ["0"]: [
      ["v", "v", "<"],
      ["v", "<", "v"],
      ["<", "v", "v"],
    ],
    ["1"]: [
      ["v", "<", "<"],
      ["<", "v", "<"],
      ["<", "<", "v"],
    ],
    ["2"]: [
      ["v", "<"],
      ["<", "v"],
    ],
    ["3"]: [["v"]],
    ["4"]: [["<", "<"]],
    ["5"]: [["<"]],
    ["6"]: [[]],
    ["7"]: [
      ["<", "<", "^"],
      ["<", "^", "<"],
      ["^", "<", "<"],
    ],
    ["8"]: [
      ["<", "^"],
      ["^", "<"],
    ],
    ["9"]: [["^"]],
  },
  ["7"]: {
    ["A"]: [
      [">", ">", "v", "v", "v"],
      [">", "v", ">", "v", "v"],
      [">", "v", "v", ">", "v"],
      [">", "v", "v", "v", ">"],
      ["v", ">", ">", "v", "v"],
      ["v", ">", "v", ">", "v"],
      ["v", ">", "v", "v", ">"],
      ["v", "v", ">", ">", "v"],
      ["v", "v", ">", "v", ">"],
    ],
    ["0"]: [
      [">", "v", "v", "v"],
      ["v", ">", "v", "v"],
      ["v", "v", ">", "v"],
    ],
    ["1"]: [["v", "v"]],
    ["2"]: [
      [">", "v", "v"],
      ["v", ">", "v"],
      ["v", "v", ">"],
    ],
    ["3"]: [
      [">", ">", "v", "v"],
      [">", "v", ">", "v"],
      [">", "v", "v", ">"],
      ["v", ">", ">", "v"],
      ["v", ">", "v", ">"],
      ["v", "v", ">", ">"],
    ],
    ["4"]: [["v"]],
    ["5"]: [
      [">", "v"],
      ["v", ">"],
    ],
    ["6"]: [
      [">", ">", "v"],
      [">", "v", ">"],
      ["v", ">", ">"],
    ],
    ["7"]: [[]],
    ["8"]: [[">"]],
    ["9"]: [[">", ">"]],
  },
  ["8"]: {
    ["A"]: [
      [">", "v", "v", "v"],
      ["v", ">", "v", "v"],
      ["v", "v", ">", "v"],
      ["v", "v", "v", ">"],
    ],
    ["0"]: [["v", "v", "v"]],
    ["1"]: [
      ["v", "v", "<"],
      ["v", "<", "v"],
      ["<", "v", "v"],
    ],
    ["2"]: [["v", "v"]],
    ["3"]: [
      [">", "v", "v"],
      ["v", ">", "v"],
      ["v", "v", ">"],
    ],
    ["4"]: [
      ["v", "<"],
      ["<", "v"],
    ],
    ["5"]: [["v"]],
    ["6"]: [
      [">", "v"],
      ["v", ">"],
    ],
    ["7"]: [["<"]],
    ["8"]: [[]],
    ["9"]: [[">"]],
  },
  ["9"]: {
    ["A"]: [["v", "v", "v"]],
    ["0"]: [
      ["<", "v", "v", "v"],
      ["v", "<", "v", "v"],
      ["v", "v", "<", "v"],
      ["v", "v", "v", "<"],
    ],
    ["1"]: [
      ["<", "<", "v", "v"],
      ["<", "v", "<", "v"],
      ["<", "v", "v", "<"],
      ["v", "<", "<", "v"],
      ["v", "<", "v", "<"],
      ["v", "v", "<", "<"],
    ],
    ["2"]: [
      ["<", "v", "v"],
      ["v", "<", "v"],
      ["v", "v", "<"],
    ],
    ["3"]: [["v", "v"]],
    ["4"]: [
      ["v", "<", "<"],
      ["<", "v", "<"],
      ["<", "<", "v"],
    ],
    ["5"]: [
      ["<", "v"],
      ["v", "<"],
    ],
    ["6"]: [["v"]],
    ["7"]: [["<", "<"]],
    ["8"]: [["<"]],
    ["9"]: [[]],
  },
};

type DirectionalButtons = "A" | "^" | "v" | "<" | ">";

const DIRECTIONAL_TRANSITIONS: Record<
  DirectionalButtons,
  Record<DirectionalButtons, DirectionalButtons[][]>
> = {
  ["A"]: {
    ["A"]: [[]],
    ["^"]: [["<"]],
    ["v"]: [
      ["<", "v"],
      ["v", "<"],
    ],
    ["<"]: [
      ["<", "v", "<"],
      ["v", "<", "<"],
    ],
    [">"]: [["v"]],
  },
  ["^"]: {
    ["A"]: [[">"]],
    ["^"]: [[]],
    ["v"]: [["v"]],
    ["<"]: [["v", "<"]],
    [">"]: [
      [">", "v"],
      ["v", ">"],
    ],
  },
  ["v"]: {
    ["A"]: [
      ["^", ">"],
      [">", "^"],
    ],
    ["^"]: [["^"]],
    ["v"]: [[]],
    ["<"]: [["<"]],
    [">"]: [[">"]],
  },
  ["<"]: {
    ["A"]: [
      [">", "^", ">"],
      [">", ">", "^"],
    ],
    ["^"]: [[">", "^"]],
    ["v"]: [[">"]],
    ["<"]: [[]],
    [">"]: [[">", ">"]],
  },
  [">"]: {
    ["A"]: [["^"]],
    ["^"]: [
      ["<", "^"],
      ["^", "<"],
    ],
    ["v"]: [["<"]],
    ["<"]: [["<", "<"]],
    [">"]: [[]],
  },
};

function parseInput() {
  return fs
    .readFileSync("src/inputs/2024/21/day.21.input.txt")
    .toString()
    .split("\n")
    .filter((x) => x)
    .map((x) => x.split("") as NumericButtons[]);
}

export function part1() {
  return getTotalComplexity(1);
}

export function part2() {
  return getTotalComplexity(24);
}

function getTotalComplexity(maximumDepth: number) {
  const lookup = new Map<string, number>();

  return parseInput()
    .map((code) => getComplexity(code, maximumDepth, lookup))
    .sum();
}

function getComplexity(
  code: NumericButtons[],
  maximumDepth: number,
  lookup: Map<string, number>
) {
  const minimumLength = code
    .map((_, i) => getMinimumLength(code, i, maximumDepth, lookup))
    .sum();

  return minimumLength * Number(code.slice(0, -1).join(""));
}

function getMinimumLength(
  buttons: NumericButtons[],
  i: number,
  maximumDepth: number,
  lookup: Map<string, number>
) {
  const oldButton = buttons[i - 1] ?? "A";
  const newButton = buttons[i];

  const transitions = NUMERIC_TRANSITIONS[oldButton][newButton];

  let minimumLength = Number.POSITIVE_INFINITY;

  for (const transition of transitions) {
    const length = [...transition, "A" as DirectionalButtons]
      .map((_, i, sequence) =>
        getMinimumLengthHelper(sequence, i, 0, maximumDepth, lookup)
      )
      .sum();

    if (length < minimumLength) {
      minimumLength = length;
    }
  }

  return minimumLength;
}

function getMinimumLengthHelper(
  buttons: DirectionalButtons[],
  i: number,
  currentDepth: number,
  maximumDepth: number,
  lookup: Map<string, number>
) {
  const oldButton = buttons[i - 1] ?? "A";
  const newButton = buttons[i];

  const transitions = DIRECTIONAL_TRANSITIONS[oldButton][newButton];

  if (currentDepth === maximumDepth) {
    return transitions[0].length + 1;
  }

  const key = toKey([oldButton, newButton, maximumDepth - currentDepth]);

  if (lookup.has(key)) {
    return lookup.get(key)!;
  }

  let minimumLength = Number.POSITIVE_INFINITY;

  for (const transition of transitions) {
    const length = [...transition, "A" as DirectionalButtons]
      .map((_, i, sequence) =>
        getMinimumLengthHelper(
          sequence,
          i,
          currentDepth + 1,
          maximumDepth,
          lookup
        )
      )
      .sum();

    if (length < minimumLength) {
      minimumLength = length;
    }
  }

  lookup.set(key, minimumLength);

  return minimumLength;
}
